━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
基本的な全体方針
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	複数のソートを実装
		→　全てのソートを実行して操作回数・内容を記録しておく
		→　最も少なかったものを採用・出力。

	is_sorted
		SORTED --> end sort
		SORTED_A --> A is sorted
		SHIFT_SORTED --> need to rotate


■　=================================
■　■　T　A　S　K　!!
■　=================================
■	
■	２：fool_sort の最適化
		ごちゃってきたので整理
■
■	３：　Makefile 構造化フォルダに対応
■　=================================


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
Fool_Sort
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	最小値からとりあえず B に渡していくだけの愚直ソートさん

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
QUICK_SORT
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	二分探索


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
MY_SORT
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
	与えられた引数の偏り方を見る
		１：並びはどうか
			3 8 2 9 7 5 6 1 4
			----------------------
			1 2 3 4 5 6 7 8 9 : 0
			9 1[2]3 4[5 6]7 8 : 3 <--
			8 9 1 2 3 4 5 6 7 : 0
			7[8]9 1 2 3 4 5 6 : 1
			6 7 8[9]1 2 3 4 5 : 1
			5 6 7 8 9 1 2 3[4]: 1
			4 5 6 7 8 9 1 2 3 : 0
			3]4 5 6[7]8 9[1]2 : 3 <--
			2 3 4 5 6 7 8 9 1 : 0
		
		２：S M L 分布
			3 8 2 9 7 5 6 1 4　（S : 1-3, M : 4-6, L : 7-9）
			----------------------
			S L S L L M M S M
				→　M, L は比較的集まっている（どう定量化・比較するか？）

		3 : S L 分布
			3 8 2 9 7 5 6 1 4　（S : 1-4, M : 5, L : 6-9）
			----------------------
			S L S L L M L S S
				→　S は比較的集まっている（どう定量化・比較するか？）
				→　L もそんなに散らばってはいない
				→　M はどちらに属するべきか？

		４：各数字の並び具合・離れ具合
			3 8 2 9 7 5 6 1 4
			----------------------
			12 : distance 3, sorted YES (PUSH ? SWAP ?)
			23 : distance 1, sorted NO (may be SWAP is low cost) <-- 引数の総数による
			34 : distance 0, sorted NO (SWAP is needed)
			45 : distance 2, sorted NO (may be SWAP is low cost)
			56 : distance 0, sorted YES (nothing to do)
			67 : distance 1, sorted NO　(may be SWAP is low cost)
			78 : distance 2, sorted NO (may be SWAP is low cost)
			89 : distance 1, sorted YES ()
			91 : distance 3, sorted YES ()

		各数字に対する評価
			1 : distance to next 3, 

	動かしたい数・動かしたくない数に分ける
	動かしたい数をどう動かすのが最適か（SWAP で交換するコストと PUSH で移動するコストの比較）

	PUSH 移動と SWAP 移動のコスト
		Index ＝ n の数字を Index ＝ １ に持ってくる場合
			PUSH : ROTATE * n + PUSH * 1 + ROTATE * (n - 1) + PUSH *1
			SWAP : ROTATE * (n - 1) + SWAP * (n - 1) + RROTATE * (n - 2	)